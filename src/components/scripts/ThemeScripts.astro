<!-- Theme Scripts -->
<script async defer>
	document.addEventListener('astro:page-load', () => {
		// Menu Dropdown
		const menuItems = document.querySelectorAll('.header__menu-item')
		menuItems.forEach((menuItem) => {
			const submenu = menuItem.querySelector('.header__submenu')
			const link = menuItem.querySelector('.header__menu-link')

			if (submenu && link) {
				link.addEventListener('click', function (event) {
					event.preventDefault()
					menuItem.classList.toggle('open')
				})
			}
		})
		document.addEventListener('click', function (event) {
			const target = event.target

			menuItems.forEach((menuItem) => {
				const submenu = menuItem.querySelector('.header__submenu')
				if (submenu && !menuItem.contains(target)) {
					menuItem.classList.remove('open')
				}
			})
		})

		// Menu toggle
		const headerToggle = document.querySelector('.header__toggle')
		const headerMenu = document.querySelector('.header__menu')
		if (headerToggle && headerMenu) {
			headerToggle.addEventListener('click', () => {
				headerToggle.classList.toggle('header__toggle--open')
				const isExpanded = headerToggle.getAttribute('aria-expanded') === 'true'
				const newExpandedValue = isExpanded ? 'false' : 'true'
				headerToggle.setAttribute('aria-expanded', newExpandedValue)
				headerMenu.classList.toggle('header__menu--open')
			})
		}
	})
</script>

<!-- Menu Close -->
<script>
	// Function to close all menus
	function closeAllMenus() {
		// Remove 'open' class from all menu items
		document.querySelectorAll('.header__menu-item').forEach((item) => {
			item.classList.remove('open')
		})
		// Close mobile menu if open
		const menu = document.querySelector('.header__menu')
		const toggle = document.getElementById('header-toggle')
		if (menu && toggle && menu.classList.contains('header__menu--open')) {
			menu.classList.remove('header__menu--open')
			toggle.classList.remove('header__toggle--open')
			toggle.setAttribute('aria-expanded', 'false')
		}
	}

	// Function to initialize menu handlers
	function initMenuHandlers() {
		// Close all menus initially
		closeAllMenus()

		// Handle menu item clicks
		document.querySelectorAll('.header__menu-link').forEach((link) => {
			link.addEventListener('click', closeAllMenus)
		})
	}

	// Initialize on page load
	initMenuHandlers()

	// Re-initialize when Astro updates the page
	document.addEventListener('astro:after-swap', initMenuHandlers)

	// Handle hash changes
	window.addEventListener('hashchange', closeAllMenus)

	// Cleanup when component is destroyed
	document.addEventListener('astro:before-swap', () => {
		document.querySelectorAll('.header__menu-link').forEach((link) => {
			link.removeEventListener('click', closeAllMenus)
		})
	})
</script>

<!-- Scroll animations -->
<script>
	const initializeObserver = () => {
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('scroll-animated')
				}
			})
		})

		const elements = document.querySelectorAll('.scroll-animation .col')

		elements.forEach((element) => {
			observer.observe(element)
		})
	}

	document.addEventListener('DOMContentLoaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:page-loaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:after-swap', () => {
		initializeObserver()
	})
</script>

<!-- Body gradient -->
<script>
	/**
	 * Dynamically adjusts the radial gradient stop point
	 * based on the current viewport height and body content height.
	 *
	 * This ensures a consistent background appearance across pages
	 * with different content lengths in an Astro site using view transitions
	 * (which do not trigger full page reloads).
	 */
	function updateGradientStop() {
		const bodyHeight = document.body.scrollHeight
		const viewportHeight = window.innerHeight

		// Calculate a ratio (as a percentage) of viewport to body height
		// Clamp between 15% and 100% for visual consistency
		const ratio = Math.min(100, Math.max(15, (viewportHeight / bodyHeight) * 100))

		// Set the CSS variable used in the radial gradient
		document.body.style.setProperty('--gradient-stop', `${ratio}%`)
	}

	// Run once when the DOM is fully loaded
	document.addEventListener('DOMContentLoaded', updateGradientStop)

	// Re-run after client-side navigation in Astro
	document.addEventListener('astro:page-load', updateGradientStop)

	// Re-run after Astro view transitions complete (astro:after-swap)
	document.addEventListener('astro:after-swap', updateGradientStop)
</script>
